import React, { useRef } from 'react';
import anime from 'animejs';
import useMeasure from 'use-measure';
import { useMediaQuery } from '@mui/material';

// see https://codepen.io/alaingalvan/embed/rrZXYB/?height=480&theme-id=0&default-tab=js,result&embed-version=2
class Anime extends React.Component {
  constructor(props) {
    super(props);
    this.targets = [];
  }

  componentDidMount() {
    let animeProps = Object.assign({ targets: this.targets }, this.props);

    delete animeProps.children;

    this.anime = anime(animeProps);
  }

  addTarget = newTarget => {
    this.targets = [...this.targets, newTarget];
  };

  render() {
    let children = [];
    if (this.props.children) {
      if (Array.isArray(this.props.children)) children = this.props.children;
      else children = [this.props.children];
    }

    return (
      <g>
        {children.map((child, i) =>
          React.cloneElement(child, { key: i, ref: this.addTarget })
        )}
      </g>
    );
  }
}

// generated at https://danmarshall.github.io/google-font-to-svg-path/
const paths = [
  'M 26.278 73.722 L 0 73.722 L 0 0.995 L 25.426 0.995 A 36.431 36.431 0 0 1 30.7 1.354 Q 33.428 1.754 35.703 2.598 A 18.88 18.88 0 0 1 37.962 3.605 A 19.171 19.171 0 0 1 42.382 6.768 A 16.187 16.187 0 0 1 45.312 10.6 A 19.649 19.649 0 0 1 47.718 19.651 A 23.121 23.121 0 0 1 47.727 20.313 Q 47.727 25 46.076 28.054 A 13.769 13.769 0 0 1 43.465 31.512 A 12.514 12.514 0 0 1 41.744 32.884 A 19.957 19.957 0 0 1 35.937 35.512 L 35.938 36.222 A 12.888 12.888 0 0 1 40.124 37.237 A 17.244 17.244 0 0 1 42.649 38.566 A 15.966 15.966 0 0 1 46.849 42.475 A 20.329 20.329 0 0 1 48.295 44.674 Q 50.488 48.51 50.565 53.999 A 28.649 28.649 0 0 1 50.568 54.404 A 20.667 20.667 0 0 1 49.645 60.66 A 18.447 18.447 0 0 1 48.082 64.24 A 15.765 15.765 0 0 1 43.444 69.292 A 21.304 21.304 0 0 1 40.234 71.165 A 23.393 23.393 0 0 1 35.344 72.821 Q 31.381 73.722 26.278 73.722 Z M 8.807 40.625 L 8.807 65.909 L 26.278 65.909 A 35.061 35.061 0 0 0 30.511 65.673 Q 35.057 65.118 37.671 63.262 A 8.847 8.847 0 0 0 38.548 62.554 A 11.368 11.368 0 0 0 41.249 58.902 A 10.735 10.735 0 0 0 42.187 54.404 A 13.065 13.065 0 0 0 40.305 47.568 A 13.542 13.542 0 0 0 35.788 43.02 A 16.321 16.321 0 0 0 34.943 42.525 A 15.219 15.219 0 0 0 30.227 40.915 A 20.511 20.511 0 0 0 26.705 40.625 L 8.807 40.625 Z M 8.807 8.807 L 8.807 32.955 L 25.142 32.955 A 17.449 17.449 0 0 0 29.568 32.411 A 14.951 14.951 0 0 0 32.333 31.392 A 12.696 12.696 0 0 0 37.447 26.989 A 11.255 11.255 0 0 0 39.262 21.887 A 14.319 14.319 0 0 0 39.347 20.313 A 11.325 11.325 0 0 0 38.059 14.913 A 11.647 11.647 0 0 0 36.009 12.163 A 10.053 10.053 0 0 0 32.34 9.869 Q 29.501 8.807 25.426 8.807 L 8.807 8.807 Z',
  'M 109.375 45.739 L 109.375 49.29 L 67.33 49.29 L 67.33 42.046 L 100.852 42.046 A 19.954 19.954 0 0 0 100.336 37.421 A 16.401 16.401 0 0 0 99.023 33.807 Q 97.195 30.185 93.839 28.09 A 13.734 13.734 0 0 0 88.4 26.16 A 17.761 17.761 0 0 0 85.937 25.995 A 17.029 17.029 0 0 0 81.425 26.569 A 13.812 13.812 0 0 0 77.29 28.463 Q 73.651 30.931 71.697 34.873 Q 69.744 38.814 69.744 43.324 L 69.744 48.154 A 29.56 29.56 0 0 0 70.099 52.861 Q 70.617 56.071 71.893 58.612 A 16.027 16.027 0 0 0 75.014 62.943 A 14.456 14.456 0 0 0 77.876 65.11 A 16.452 16.452 0 0 0 84.029 67.154 A 21.063 21.063 0 0 0 86.79 67.33 A 20.009 20.009 0 0 0 90.216 67.048 A 15.952 15.952 0 0 0 92.773 66.389 A 12.481 12.481 0 0 0 97.408 63.548 A 12.253 12.253 0 0 0 99.898 60.046 A 14.909 14.909 0 0 0 100.426 58.807 L 108.523 61.08 A 17.81 17.81 0 0 1 104.226 68.306 A 20.045 20.045 0 0 1 98.383 72.441 A 23.971 23.971 0 0 1 96.768 73.136 A 25.243 25.243 0 0 1 90.629 74.636 A 32.135 32.135 0 0 1 86.79 74.858 A 29.835 29.835 0 0 1 80.094 74.14 A 22.855 22.855 0 0 1 73.207 71.36 A 23.065 23.065 0 0 1 64.435 61.559 A 29.849 29.849 0 0 1 61.832 53.106 A 39.781 39.781 0 0 1 61.364 46.875 A 38.841 38.841 0 0 1 62.108 39.103 A 30.086 30.086 0 0 1 64.435 32.085 Q 67.507 25.675 73.029 22.071 A 22.144 22.144 0 0 1 82.795 18.639 A 27.978 27.978 0 0 1 85.937 18.466 Q 90.199 18.466 94.354 19.887 A 20.86 20.86 0 0 1 101.596 24.191 A 23.981 23.981 0 0 1 101.918 24.485 A 19.902 19.902 0 0 1 105.478 28.979 A 26.678 26.678 0 0 1 107.351 32.884 A 27.458 27.458 0 0 1 108.735 37.914 Q 109.375 41.444 109.375 45.739 Z',
  'M 130.54 40.909 L 130.54 73.722 L 122.159 73.722 L 122.159 19.176 L 130.256 19.176 L 130.256 27.699 L 130.966 27.699 A 15.691 15.691 0 0 1 136.79 21.005 A 14.748 14.748 0 0 1 141.264 19.101 Q 143.786 18.466 146.875 18.466 A 22.996 22.996 0 0 1 151.917 18.995 A 17.925 17.925 0 0 1 156.57 20.721 A 15.19 15.19 0 0 1 162.545 26.636 A 18.767 18.767 0 0 1 163.033 27.539 A 19.762 19.762 0 0 1 164.651 32.167 Q 165.341 35.256 165.341 39.063 L 165.341 73.722 L 156.96 73.722 L 156.96 39.631 A 19.909 19.909 0 0 0 156.575 35.588 Q 156.063 33.121 154.871 31.228 A 11.08 11.08 0 0 0 153.622 29.599 Q 150.284 25.995 144.46 25.995 A 15.807 15.807 0 0 0 140.276 26.53 A 13.414 13.414 0 0 0 137.305 27.735 A 12.37 12.37 0 0 0 132.465 32.606 A 14.787 14.787 0 0 0 132.351 32.813 Q 130.591 36.056 130.541 40.641 A 24.694 24.694 0 0 0 130.54 40.909 Z',
  'M 184.375 60.37 L 184.375 6.108 L 192.756 6.108 L 192.756 58.097 A 19.344 19.344 0 0 0 192.839 59.953 Q 193.05 62.142 193.803 63.406 A 6.155 6.155 0 0 0 194.784 64.671 A 4.679 4.679 0 0 0 196.502 65.75 A 10.378 10.378 0 0 0 199.986 66.336 A 11.304 11.304 0 0 0 200 66.336 A 19.825 19.825 0 0 0 200.893 66.317 Q 201.292 66.299 201.637 66.263 A 8.457 8.457 0 0 0 202.273 66.176 Q 202.952 66.053 203.424 65.962 A 42.336 42.336 0 0 0 203.693 65.909 L 205.398 73.438 A 10.269 10.269 0 0 1 204.799 73.639 Q 204.171 73.831 203.307 74.03 A 35.846 35.846 0 0 1 203.018 74.095 A 12.434 12.434 0 0 1 201.773 74.299 Q 201.125 74.374 200.376 74.407 A 28.107 28.107 0 0 1 199.148 74.432 Q 195.597 74.432 192.205 72.905 Q 188.814 71.378 186.594 68.253 A 11.631 11.631 0 0 1 184.741 63.966 Q 184.386 62.355 184.375 60.49 A 20.278 20.278 0 0 1 184.375 60.37 Z M 176.136 19.176 L 204.403 19.176 L 204.403 26.279 L 176.136 26.279 L 176.136 19.176 Z',
  'M 218.182 0.995 L 226.563 0.995 L 226.563 73.722 L 218.182 73.722 L 218.182 0.995 Z',
  'M 287.358 45.739 L 287.358 49.29 L 245.313 49.29 L 245.313 42.046 L 278.835 42.046 A 19.954 19.954 0 0 0 278.319 37.421 A 16.401 16.401 0 0 0 277.006 33.807 Q 275.178 30.185 271.822 28.09 A 13.734 13.734 0 0 0 266.383 26.16 A 17.761 17.761 0 0 0 263.92 25.995 A 17.029 17.029 0 0 0 259.408 26.569 A 13.812 13.812 0 0 0 255.273 28.463 Q 251.634 30.931 249.68 34.873 Q 247.727 38.814 247.727 43.324 L 247.727 48.154 A 29.56 29.56 0 0 0 248.082 52.861 Q 248.6 56.071 249.876 58.612 A 16.027 16.027 0 0 0 252.997 62.943 A 14.456 14.456 0 0 0 255.859 65.11 A 16.452 16.452 0 0 0 262.012 67.154 A 21.063 21.063 0 0 0 264.773 67.33 A 20.009 20.009 0 0 0 268.199 67.048 A 15.952 15.952 0 0 0 270.756 66.389 A 12.481 12.481 0 0 0 275.391 63.548 A 12.253 12.253 0 0 0 277.881 60.046 A 14.909 14.909 0 0 0 278.409 58.807 L 286.506 61.08 A 17.81 17.81 0 0 1 282.209 68.306 A 20.045 20.045 0 0 1 276.366 72.441 A 23.971 23.971 0 0 1 274.751 73.136 A 25.243 25.243 0 0 1 268.612 74.636 A 32.135 32.135 0 0 1 264.773 74.858 A 29.835 29.835 0 0 1 258.077 74.14 A 22.855 22.855 0 0 1 251.19 71.36 A 23.065 23.065 0 0 1 242.418 61.559 A 29.849 29.849 0 0 1 239.815 53.106 A 39.781 39.781 0 0 1 239.347 46.875 A 38.841 38.841 0 0 1 240.091 39.103 A 30.086 30.086 0 0 1 242.418 32.085 Q 245.49 25.675 251.012 22.071 A 22.144 22.144 0 0 1 260.778 18.639 A 27.978 27.978 0 0 1 263.92 18.466 Q 268.182 18.466 272.337 19.887 A 20.86 20.86 0 0 1 279.579 24.191 A 23.981 23.981 0 0 1 279.901 24.485 A 19.902 19.902 0 0 1 283.461 28.979 A 26.678 26.678 0 0 1 285.334 32.884 A 27.458 27.458 0 0 1 286.718 37.914 Q 287.358 41.444 287.358 45.739 Z',
  'M 297.727 93.04 L 299.858 85.654 Q 303.405 86.561 306.037 86.031 A 8.304 8.304 0 0 0 307.493 85.6 Q 310.095 84.556 312.105 79.967 A 29.787 29.787 0 0 0 312.784 78.267 L 314.347 74.006 L 294.176 19.176 L 303.267 19.176 L 318.324 62.642 L 318.892 62.642 L 333.949 19.176 L 343.111 19.319 L 319.886 81.676 A 28.074 28.074 0 0 1 318.261 85.257 A 20.307 20.307 0 0 1 316.016 88.583 A 15.362 15.362 0 0 1 312.52 91.691 A 13.944 13.944 0 0 1 310.671 92.685 A 15.624 15.624 0 0 1 306.135 93.903 A 19.554 19.554 0 0 1 303.835 94.034 A 23.065 23.065 0 0 1 301.939 93.96 Q 301.049 93.887 300.259 93.74 A 14.051 14.051 0 0 1 300.036 93.697 Q 298.366 93.36 297.727 93.04 Z',
  'M 442.259 23.722 L 433.168 23.722 Q 431.996 20.135 430.096 17.277 A 20.439 20.439 0 0 0 425.586 12.394 A 19.154 19.154 0 0 0 419.673 9.304 A 22.099 22.099 0 0 0 414.859 8.346 A 27.069 27.069 0 0 0 412.429 8.239 Q 405.966 8.239 400.675 11.577 A 21.644 21.644 0 0 0 394.217 17.964 A 28.114 28.114 0 0 0 392.259 21.414 A 29.729 29.729 0 0 0 389.964 28.401 Q 389.302 31.658 389.168 35.412 A 54.378 54.378 0 0 0 389.134 37.358 A 46.952 46.952 0 0 0 389.635 44.418 Q 390.393 49.394 392.294 53.303 A 25.917 25.917 0 0 0 395.98 58.973 A 21.107 21.107 0 0 0 400.852 63.14 A 22.485 22.485 0 0 0 412.368 66.47 A 26.9 26.9 0 0 0 412.997 66.478 A 24.724 24.724 0 0 0 419.051 65.765 A 20.17 20.17 0 0 0 424.023 63.797 A 18.891 18.891 0 0 0 431.481 56.197 A 21.605 21.605 0 0 0 433.785 49.363 A 28.867 28.867 0 0 0 434.162 44.603 L 436.861 45.171 L 414.986 45.171 L 414.986 37.358 L 442.685 37.358 L 442.685 45.171 A 35.675 35.675 0 0 1 441.846 53.079 A 27.668 27.668 0 0 1 438.867 60.796 A 26.524 26.524 0 0 1 428.356 71.076 A 29.894 29.894 0 0 1 417.715 74.428 A 37.658 37.658 0 0 1 412.997 74.716 A 34.759 34.759 0 0 1 403.664 73.508 A 29.026 29.026 0 0 1 396.04 70.171 A 29.911 29.911 0 0 1 385.744 59.28 A 36.404 36.404 0 0 1 384.677 57.245 A 39.215 39.215 0 0 1 381.417 46.986 Q 380.614 42.5 380.611 37.398 A 64.562 64.562 0 0 1 380.611 37.358 A 55.133 55.133 0 0 1 381.229 28.917 A 42.662 42.662 0 0 1 382.937 21.822 A 37.001 37.001 0 0 1 386.327 14.429 A 31.039 31.039 0 0 1 389.524 10.05 A 28.882 28.882 0 0 1 399.609 2.593 A 30.303 30.303 0 0 1 409.847 0.091 A 36.084 36.084 0 0 1 412.429 0 A 33.937 33.937 0 0 1 420.294 0.888 A 30.196 30.196 0 0 1 423.171 1.723 A 29.556 29.556 0 0 1 432.085 6.588 A 28.199 28.199 0 0 1 438.636 14.081 A 28.642 28.642 0 0 1 442.191 23.372 A 32.391 32.391 0 0 1 442.259 23.722 Z',
  'M 464.986 73.722 L 456.605 73.722 L 456.605 19.176 L 464.702 19.176 L 464.702 27.415 L 465.27 27.415 A 12.924 12.924 0 0 1 470.014 21.29 A 16.143 16.143 0 0 1 470.668 20.846 A 15.858 15.858 0 0 1 479.322 18.325 A 18.959 18.959 0 0 1 479.474 18.324 A 57.536 57.536 0 0 1 479.965 18.326 Q 480.719 18.333 481.716 18.358 A 159.594 159.594 0 0 1 481.783 18.36 Q 483.168 18.395 483.878 18.466 L 483.878 26.989 A 5.495 5.495 0 0 0 483.64 26.936 Q 483.122 26.832 481.945 26.652 A 28.5 28.5 0 0 0 481.942 26.652 A 20.409 20.409 0 0 0 479.487 26.432 A 23.396 23.396 0 0 0 478.764 26.421 A 16.393 16.393 0 0 0 474.784 26.887 A 13.609 13.609 0 0 0 471.68 28.072 Q 468.572 29.723 466.779 32.618 A 12.021 12.021 0 0 0 465.014 38.294 A 14.626 14.626 0 0 0 464.986 39.205 L 464.986 73.722 Z',
  'M 514.276 74.858 Q 506.889 74.858 501.332 71.343 A 23.47 23.47 0 0 1 493.167 62.477 A 28.205 28.205 0 0 1 492.667 61.506 A 29.633 29.633 0 0 1 490.072 53.249 A 39.68 39.68 0 0 1 489.56 46.733 A 39.482 39.482 0 0 1 490.231 39.278 A 29.497 29.497 0 0 1 492.667 31.854 Q 495.774 25.498 501.332 21.982 A 22.714 22.714 0 0 1 511.13 18.635 A 28.723 28.723 0 0 1 514.276 18.466 Q 521.662 18.466 527.219 21.982 Q 532.777 25.498 535.884 31.854 A 29.919 29.919 0 0 1 538.479 40.166 A 40.289 40.289 0 0 1 538.991 46.733 A 38.845 38.845 0 0 1 538.309 54.189 A 29.201 29.201 0 0 1 535.884 61.506 A 24.746 24.746 0 0 1 530.897 68.454 A 22.827 22.827 0 0 1 527.219 71.343 A 22.714 22.714 0 0 1 517.421 74.69 A 28.723 28.723 0 0 1 514.276 74.858 Z M 514.276 67.33 A 17.999 17.999 0 0 0 518.356 66.891 A 12.836 12.836 0 0 0 523.509 64.453 A 16.691 16.691 0 0 0 528.468 57.893 A 20.198 20.198 0 0 0 528.871 56.89 A 28.197 28.197 0 0 0 530.55 48.757 A 33.064 33.064 0 0 0 530.611 46.733 A 30.316 30.316 0 0 0 529.712 39.257 A 27.153 27.153 0 0 0 528.871 36.542 Q 527.131 31.819 523.509 28.907 A 12.9 12.9 0 0 0 517.898 26.339 A 18.181 18.181 0 0 0 514.276 25.995 A 17.725 17.725 0 0 0 510.12 26.457 A 12.748 12.748 0 0 0 505.043 28.907 Q 501.42 31.819 499.68 36.542 A 28.643 28.643 0 0 0 497.984 45.022 A 33.311 33.311 0 0 0 497.94 46.733 A 30.241 30.241 0 0 0 498.763 53.884 A 26.749 26.749 0 0 0 499.68 56.89 A 17.858 17.858 0 0 0 502.545 61.986 A 16.154 16.154 0 0 0 505.043 64.453 A 12.95 12.95 0 0 0 510.576 66.974 A 18.331 18.331 0 0 0 514.276 67.33 Z',
  'M 586.151 51.421 L 586.151 19.176 L 594.531 19.176 L 594.531 73.722 L 586.151 73.722 L 586.151 64.489 L 585.582 64.489 A 17.418 17.418 0 0 1 580.654 70.747 A 21.04 21.04 0 0 1 579.616 71.538 Q 575.568 74.432 569.389 74.432 A 19.772 19.772 0 0 1 564.136 73.758 A 16.725 16.725 0 0 1 560.298 72.177 A 14.972 14.972 0 0 1 555.001 67.053 A 18.936 18.936 0 0 1 554.048 65.359 Q 552.164 61.576 551.842 56.145 A 39.026 39.026 0 0 1 551.776 53.836 L 551.776 19.176 L 560.156 19.176 L 560.156 53.267 A 17.183 17.183 0 0 0 560.609 57.323 A 11.861 11.861 0 0 0 563.512 62.784 A 11.177 11.177 0 0 0 571.563 66.326 A 14.942 14.942 0 0 0 572.088 66.336 A 13.353 13.353 0 0 0 576.343 65.614 A 17.102 17.102 0 0 0 578.462 64.738 A 13.632 13.632 0 0 0 583.138 60.922 A 16.646 16.646 0 0 0 583.931 59.837 Q 586.151 56.534 586.151 51.421 Z',
  'M 618.253 94.176 L 609.872 94.176 L 609.872 19.176 L 617.969 19.176 L 617.969 27.841 L 618.963 27.841 A 43.414 43.414 0 0 1 619.611 26.875 Q 620.35 25.803 621.388 24.402 A 139.254 139.254 0 0 1 621.538 24.201 A 12.4 12.4 0 0 1 623.534 22.113 Q 624.73 21.11 626.296 20.224 A 11.963 11.963 0 0 1 629.171 19.09 Q 630.513 18.739 632.104 18.586 A 27.385 27.385 0 0 1 634.73 18.466 A 23.344 23.344 0 0 1 641.87 19.526 A 20.422 20.422 0 0 1 646.875 21.911 A 22.166 22.166 0 0 1 653.888 29.402 A 27.613 27.613 0 0 1 655.078 31.676 A 30.459 30.459 0 0 1 657.441 39.388 A 42.229 42.229 0 0 1 658.026 46.591 A 42.927 42.927 0 0 1 657.461 53.728 Q 656.759 57.891 655.184 61.364 A 26.849 26.849 0 0 1 655.078 61.595 A 25.344 25.344 0 0 1 651.305 67.518 A 21.454 21.454 0 0 1 646.911 71.396 Q 641.69 74.858 634.872 74.858 A 25.603 25.603 0 0 1 631.542 74.655 Q 629.855 74.433 628.456 73.969 A 11.67 11.67 0 0 1 626.456 73.1 A 19.168 19.168 0 0 1 624.048 71.529 Q 622.576 70.391 621.591 69.088 A 81.522 81.522 0 0 1 620.602 67.753 Q 619.63 66.411 619.004 65.408 A 23.912 23.912 0 0 1 618.963 65.341 L 618.253 65.341 L 618.253 94.176 Z M 618.111 46.449 A 35.789 35.789 0 0 0 618.509 51.918 A 26.179 26.179 0 0 0 619.922 57.333 A 18.614 18.614 0 0 0 622.065 61.405 A 14.832 14.832 0 0 0 625.213 64.684 A 12.85 12.85 0 0 0 631.167 67.143 A 17.099 17.099 0 0 0 633.736 67.33 A 16.385 16.385 0 0 0 637.864 66.834 A 12.509 12.509 0 0 0 642.525 64.542 A 16.235 16.235 0 0 0 646.915 59.129 A 20.457 20.457 0 0 0 647.852 57.014 A 27.596 27.596 0 0 0 649.433 50.325 A 34.487 34.487 0 0 0 649.645 46.449 A 32.518 32.518 0 0 0 649.149 40.653 A 25.947 25.947 0 0 0 647.887 36.062 A 17.817 17.817 0 0 0 645.476 31.623 A 15.188 15.188 0 0 0 642.596 28.711 A 12.872 12.872 0 0 0 637.038 26.287 A 17.85 17.85 0 0 0 633.736 25.995 A 16.846 16.846 0 0 0 629.712 26.453 A 12.677 12.677 0 0 0 625.142 28.569 A 14.857 14.857 0 0 0 620.915 33.506 A 19.058 19.058 0 0 0 619.886 35.743 A 25.494 25.494 0 0 0 618.501 41.055 Q 618.111 43.586 618.111 46.449 Z',
];

const AnimatedTextPath = () => {
  const nodeRef = useRef();
  const isWide = useMediaQuery(theme => theme.breakpoints.up('sm'));
  const size = useMeasure(nodeRef);

  const { width } = size;

  return (
    <div ref={nodeRef} style={{ width: '100%' }}>
      <svg
        width={isWide ? width / 2 : width}
        viewBox="-5 -5 668.026 104.176"
        xmlns="http://www.w3.org/2000/svg"
      >
        <g
          id="svgGroup"
          strokeLinecap="round"
          fillRule="evenodd"
          fontSize="9pt"
          stroke="white"
          strokeWidth={1}
          fill="none"
        >
          <Anime
            easing="easeOutQuad"
            duration={3000}
            //   direction="alternate"
            //   loop={true}
            delay={(el, index) => index * 200}
            strokeDashoffset={el => {
              var pathLength = 0;
              if (el.getTotalLength) {
                pathLength = el.getTotalLength();
                el.setAttribute('stroke-dasharray', pathLength);
              }
              return [pathLength, 0];
            }}
            opacity={[0, 1]}
          >
            {paths.map((d, i) => (
              <path key={i} d={d} />
            ))}
          </Anime>
        </g>
      </svg>
    </div>
  );
};

export default AnimatedTextPath;
